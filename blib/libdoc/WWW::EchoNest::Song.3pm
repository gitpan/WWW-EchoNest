.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WWW::EchoNest::Song 3pm"
.TH WWW::EchoNest::Song 3pm "2011-08-29" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::EchoNest::Song.
.SH "VERSION"
.IX Header "VERSION"
Version 0.001.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  A Song object.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  Returns a new WWW::EchoNest::Song instance.
\&
\&  NOTE:
\&    WWW::EchoNest also provides a song() convenience
\&    function that also returns a new WWW::EchoNest::Song
\&    instance.
\&
\&  ARGUMENTS:
\&    id      => a song ID 
\&    buckets => a list of strings specifying which buckets to retrieve
\&  
\&  RETURNS:
\&    A new WWW::EchoNest::Song instance.
\&
\&  EXAMPLE:
\&    # Insert helpful example here!
.Ve
.SS "get_id"
.IX Subsection "get_id"
.Vb 1
\&  Returns the Echo Nest Song ID.
\&
\&  ARGUMENTS:
\&    none
\&  
\&  RETURNS:
\&    The Echo Nest Song ID.
\&
\&  EXAMPLE:
\&    # Insert helpful example here!
.Ve
.SS "get_title"
.IX Subsection "get_title"
.Vb 1
\&  Returns the song title.
\&
\&  ARGUMENTS:
\&    none
\&  
\&  RETURNS:
\&    Song title.
\&
\&  EXAMPLE:
\&    # Insert helpful example here!
.Ve
.SS "get_artist_name"
.IX Subsection "get_artist_name"
.Vb 1
\&  Returns the artist name.
\&
\&  ARGUMENTS:
\&    none
\&  
\&  RETURNS:
\&    Artist name.
\&
\&  EXAMPLE:
\&    # Insert helpful example here!
.Ve
.SS "get_artist_id"
.IX Subsection "get_artist_id"
.Vb 1
\&  Returns the artist ID.
\&
\&  ARGUMENTS:
\&    none
\&  
\&  RETURNS:
\&    The Echo Nest Artist ID.
\&
\&  EXAMPLE:
\&    # Insert helpful example here!
.Ve
.SS "get_song_hotttnesss"
.IX Subsection "get_song_hotttnesss"
.Vb 2
\&  Returns The Echo Nest\*(Aqs numerical estimation of
\&  how hottt this song is.
\&
\&  ARGUMENTS:
\&    cache => A boolean indicating whether or not the
\&    cached value should be used (if available).
\&    Defaults to True.
\&  
\&  RETURNS:
\&    Float representing this song\*(Aqs hotttnesss.
\&
\&  EXAMPLE:
\&    # Insert helpful example here!
.Ve
.SS "get_artist_hotttnesss"
.IX Subsection "get_artist_hotttnesss"
.Vb 2
\&  Returns The Echo Nest\*(Aqs numerical estimation of
\&  how hottt the artist for this song is.
\&
\&  ARGUMENTS:
\&    cache => A boolean indicating whether or not the
\&    cached value should be used (if available).
\&    Defaults to True.
\&  
\&  RETURNS:
\&    Float representing the artist\*(Aqs hotttnesss for
\&    this song.
\&
\&  EXAMPLE:
\&    # Insert helpful example here!
.Ve
.SS "get_artist_familiarity"
.IX Subsection "get_artist_familiarity"
.Vb 3
\&  Returns The Echo Nest\*(Aqs numerical estimation of
\&  how familiar the artist for this song is to the
\&  rest of the world.
\&
\&  ARGUMENTS:
\&    cache    => A boolean indicating whether or not the cached value should be used (if available). Defaults to True.
\&  
\&  RETURNS:
\&    Float representing the artist\*(Aqs familiarity for
\&    this song.
\&
\&  EXAMPLE:
\&    # Insert helpful example here!
.Ve
.SS "get_artist_location"
.IX Subsection "get_artist_location"
.Vb 1
\&  Returns info about where this song\*(Aqs artist is from.
\&
\&  ARGUMENTS:
\&    cache   => A boolean indicating whether or not the cached value should be used (if available). Defaults to True.
\&  
\&  RETURNS:
\&    A reference to a hash describing location, latitude,
\&    and longitude for this Song\*(Aqs artist.
\&
\&  EXAMPLE:
\&    # Insert helpful example here!
.Ve
.SS "get_audio_summary"
.IX Subsection "get_audio_summary"
.Vb 3
\&  Get an audio summary of a song containing mode, tempo,
\&  key, duration, time signature, loudness, danceability,
\&  energy, and analysis_url.
\&
\&  ARGUMENTS:
\&    cache => A boolean indicating whether or not the
\&    cached value should be used (if available). Defaults to True.
\&  
\&  RETURNS:
\&    A reference to a hash containing mode, tempo, key,
\&    duration, time signature, loudness, danceability,
\&    energy and analysis_url keys.
\&
\&  EXAMPLE:
\&    # Insert helpful example here!
.Ve
.SS "get_foreign_id"
.IX Subsection "get_foreign_id"
.Vb 1
\&  Get the foreign id for this song for a specific id space.
\&
\&  ARGUMENTS:
\&    idspace  => A string indicating the idspace to fetch a foreign id for.
\&  
\&  RETURNS:
\&    A foreign ID string.
\&
\&  EXAMPLE:
\&    # Insert helpful example here!
.Ve
.SS "get_tracks"
.IX Subsection "get_tracks"
.Vb 1
\&  Get the tracks for a song given a catalog.
\&
\&  ARGUMENTS:
\&    catalog => A string representing the catalog whose track you want to retrieve.
\&  
\&  RETURNS:
\&    A reference to an array of hash refs describing tracks.
\&
\&  EXAMPLE:
\&    # Insert helpful example here!
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "identify"
.IX Subsection "identify"
.Vb 1
\&  Identify a song.
\&
\&  ARGUMENTS:
\&    filename         => The path of the file you want to analyze (requires codegen binary!)
\&    query_obj        => A dict or list of dicts containing a \*(Aqcode\*(Aq element with an fp code
\&    code             => A fingerprinter code
\&    artist           => An artist name
\&    title            => A song title
\&    release          => A release name
\&    duration         => A song duration
\&    genre            => A string representing the genre
\&    buckets          => A list of strings specifying which buckets to retrieve
\&    codegen_start    => The point (in seconds) where the codegen should start
\&    codegen_duration => The duration (in seconds) the codegen should analyze
\&  
\&  RETURNS:
\&    A foreign ID string.
\&
\&  EXAMPLE:
\&    # Insert helpful example here!
.Ve
.SS "search_song"
.IX Subsection "search_song"
.Vb 1
\&  Search for songs by name, description, or constraint.
\&
\&  ARGUMENTS:
\&    title                  => the name of a song
\&    artist                 => the name of an artist
\&    artist_id              => the artist_id
\&    combined               => the artist name and song title
\&    description            => A string describing the artist and song
\&    style                  => A string describing the style/genre of the artist and song
\&    mood                   => A string describing the mood of the artist and song
\&    results                => An integer number of results to return
\&    max_tempo              => The max tempo of song results
\&    min_tempo              => The min tempo of song results
\&    max_duration           => The max duration of song results
\&    min_duration           => The min duration of song results
\&    max_loudness           => The max loudness of song results
\&    min_loudness           => The min loudness of song results
\&    artist_max_familiarity => A float specifying the max familiarity of artists to search for
\&    artist_min_familiarity => A float specifying the min familiarity of artists to search for
\&    artist_max_hotttnesss  => A float specifying the max hotttnesss of artists to search for
\&    artist_min_hotttnesss  => A float specifying the max hotttnesss of artists to search for
\&    song_max_hotttnesss    => A float specifying the max hotttnesss of songs to search for
\&    song_min_hotttnesss    => A float specifying the max hotttnesss of songs to search for
\&    max_energy             => The max energy of song results
\&    min_energy             => The min energy of song results
\&    max_dancibility        => The max dancibility of song results
\&    min_dancibility        => The min dancibility of song results
\&    mode                   => 0 or 1 (minor or major)
\&    key                    => 0\-11 (c, c\-sharp, d, e\-flat, e, f, f\-sharp, g, a\-flat, a, b\-flat, b)
\&    max_latitude           => A float specifying the max latitude of artists to search for
\&    min_latitude           => A float specifying the min latitude of artists to search for
\&    max_longitude          => A float specifying the max longitude of artists to search for
\&    min_longitude          => A float specifying the min longitude of artists to search for                        
\&    sort                   => A string indicating an attribute and order for sorting the results
\&    buckets                => A list of strings specifying which buckets to retrieve
\&    limit                  => A boolean indicating whether or not to limit the results to one of the id spaces specified in buckets
\&    rank_type              => A string denoting the desired ranking for description searches, either \*(Aqrelevance\*(Aq or \*(Aqfamiliarity\*(Aq
\&  
\&  RETURNS:
\&    A reference to an array of Song objects.
\&
\&  EXAMPLE:
\&    # Insert helpful example here!
.Ve
.SS "profile"
.IX Subsection "profile"
.Vb 1
\&  Get the profiles for multiple songs at once.
\&
\&  ARGUMENTS:
\&    ids     => A song ID or list of song IDs
\&    buckets => A list of strings specifying which buckets to retrieve
\&    limit   => A boolean indicating whether or not to limit the results to one of the id spaces specified in buckets
\&
\&  RETURNS:
\&    A reference to an array of Song objects.
\&
\&  EXAMPLE:
\&    # Insert helpful example here!
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Brian Sorahan, \f(CW\*(C`<bsorahan@gmail.com>\*(C'\fR
.SH "SUPPORT"
.IX Header "SUPPORT"
Join the Google group: <http://groups.google.com/group/www\-echonest>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks to all the folks at The Echo Nest for providing access to their
powerful \s-1API\s0.
.SH "LICENSE"
.IX Header "LICENSE"
Copyright 2011 Brian Sorahan.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
