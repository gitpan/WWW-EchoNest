.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WWW::EchoNest::Artist 3pm"
.TH WWW::EchoNest::Artist 3pm "2011-08-29" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::EchoNest::Artist \- Class definition for artist objects.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
use WWW::EchoNest::Artist;
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  Returns a new WWW::EchoNest::Artist instance.
\&
\&  NOTE:
\&    WWW::EchoNest also provides the artist() convenience method to create
\&    new instances of WWW::EchoNest::Artist.
\&  
\&  ARGUMENTS:
\&    id     => id of the new artist
\&    name   => name of the new artist
\&    
\&  RETURNS:
\&    A new WWW::EchoNest::Artist instance.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest::Artist;
\&    my $artist1 = WWW::EchoNest::Artist\->new({ id   => \*(AqARH6W4X1187B99274F\*(Aq });
\&    my $artist2 = WWW::EchoNest::Artist\->new({ name => \*(Aqpink floyd\*(Aq });
\&
\&    # or...
\&
\&    use WWW::EchoNest;
\&    my $artist1 = get_artist(\*(AqARH6W4X1187B99274F\*(Aq);
\&    my $artist2 = get_artist(\*(Aqpink floyd\*(Aq);
.Ve
.SS "get_id"
.IX Subsection "get_id"
.Vb 1
\&  Returns the id of a WWW::EchoNest::Artist instance.
\&
\&  ARGUMENTS:
\&    none
\&
\&  RETURNS:
\&    The id of a WWW::EchoNest::Artist instance.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest;
\&    my $ae = artist({ name => \*(Aqautechre\*(Aq });
\&    print $ae\->get_id(), "\en";
\&
\&    # AR4GKTH1187FB4C8DE
.Ve
.SS "get_name"
.IX Subsection "get_name"
.Vb 1
\&  Returns the name of a WWW::EchoNest::Artist instance.
\&
\&  ARGUMENTS:
\&    none
\&
\&  RETURNS:
\&    The name of a WWW::EchoNest::Artist instance.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest;
\&    my $ae = artist({ id => \*(AqAR4GKTH1187FB4C8DE\*(Aq });
\&    print $ae\->get_name(), "\en";
\&
\&    # Autechre
.Ve
.SS "get_audio"
.IX Subsection "get_audio"
.Vb 1
\&  Get a list of audio documents found on the web related to an artist.
\&
\&  ARGUMENTS:
\&    cache   => A boolean indicating whether or not the cached value should be used (if available). Defaults to True.
\&    results => An integer number of results to return
\&    start   => An integer starting value for the result set
\&
\&  RETURNS:
\&    A list of audio document hash refs.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest;
\&    my $ae          = artist({ name => \*(Aqautechre\*(Aq });
\&    my @audio_docs  = $ae\->get_audio();
\&    my %audio_doc   = %{ $audio_docs[0] };
\&
\&    for (keys %audio_doc) {
\&        print $_, " : ", $audio_doc{$_}, "\en";
\&    }
\&
\&    ######## Results may differ ########
\&    #
\&    # title : 01 \- Gelk
\&    # url : http://www.nogenremusic.com/wp\-content/uploads/2011/05/Gelk.mp3
\&    # artist : Autechre
\&    # date : 2011\-05\-14T21:29:48
\&    # length : 611.0
\&    # link : http://www.nogenremusic.com
\&    # release : Peel Session
\&    # id : 1942e901ba6a07f8674916e547b2e539
.Ve
.SS "get_biographies"
.IX Subsection "get_biographies"
.Vb 1
\&  Get a list of artist biographies.
\&
\&  ARGUMENTS:
\&    cache   => A boolean indicating whether or not the cached value should be used (if available). Defaults to True.
\&    results => An integer number of results to return
\&    start   => An integer starting value for the result set
\&    license => A string specifying the desired license type
\&
\&  RETURNS:
\&    A list of biography document hash refs.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest;
\&    my $ae             = artist({ name => \*(Aqautechre\*(Aq });
\&    my @biography_docs = $ae\->get_biographies();
\&    my %biography_doc  = %{ $biography_docs[0] };
\&    print $biography_doc{\*(Aqurl\*(Aq}, "\en";
\&
\&    ######## Results may differ ########
\&    #
\&    # url : http://www.last.fm/music/Autechre/+wiki
.Ve
.SS "get_blogs"
.IX Subsection "get_blogs"
.Vb 1
\&  Get a list of blog articles related to an artist.
\&
\&  ARGUMENTS:
\&    cache             => A boolean indicating whether or not the cached value should be used (if available). Defaults to True.
\&    results           => An integer number of results to return
\&    start             => An ingteger starting value for the result set
\&    high_relevance    => If true only items that are highly relevant for this artist will be returned
\&
\&  RETURNS:
\&    A list of blog document hash refs.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest;
\&    my $rdj            = artist({ name => \*(Aqaphex twin\*(Aq });
\&    my @blog_docs      = $rdj\->get_biographies();
\&    my %blog_doc       = %{ $blog_docs[0] };
\&    print \*(Aqurl : \*(Aq, $blog_doc{\*(Aqurl\*(Aq}, "\en";
\&
\&    ######## Results may differ ########
\&    #
\&    # url : http://www.idmforums.com/showthread.php?t=82056&goto=newpost
.Ve
.SS "get_familiarity"
.IX Subsection "get_familiarity"
.Vb 1
\&  Get Echo Nest\*(Aqs estimation of how familiar a given artist currently is to the world.
\&
\&  ARGUMENTS:
\&    cache    => A boolean indicating whether or not the cached value should be used (if available). Defaults to True.
\&
\&  RETURNS:
\&    A float representing familiarity.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest;
\&    my $artist_name   = q{Daniel Johnston};
\&    my $dj            = artist({ name => $artist_name });
\&    print $artist_name, "\*(Aqs familiarity = ", $dj\->get_familiarity(), "\en";
\&
\&    ######## Results may differ ########
\&    #
\&    # Daniel Johnston\*(Aqs familiarity = 0.72026911075927047
.Ve
.SS "get_foreign_id"
.IX Subsection "get_foreign_id"
.Vb 1
\&  Get an artist\*(Aqs id for a given id\-space. Default is MusicBrainz.
\&
\&  ARGUMENTS:
\&    idspace => A string indicating the idspace to fetch a foreign id for.
\&
\&  RETURNS:
\&    A foreign id string.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest;
\&    my $artist_name   = q{Daniel Johnston};
\&    my $dj            = artist({ name => $artist_name });
\&    print $artist_name, "\*(Aqs MusicBrainz id is ", $dj\->get_foreign_id( q{musicbrainz} ), "\en";
\&
\&    ######## Results may differ ########
\&    #
\&    # Daniel Johnston\*(Aqs MusicBrainz id is musicbrainz:artist:8a7ca8b0\-d23c\-4eff\-8fe9\-6220ba5c9c76
.Ve
.SS "get_hotttnesss"
.IX Subsection "get_hotttnesss"
.Vb 1
\&  Get Echo Nest\*(Aqs numerical estimation of how hottt an artist is.
\&
\&  ARGUMENTS:
\&    cache    => A boolean indicating whether or not the cached value should be used (if available). Defaults to True.
\&
\&  RETURNS:
\&    A float representing the artist\*(Aqs hotttnesss.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest;
\&    my $artist_name   = q{Fred Frith};
\&    my $frith         = artist({ name => $artist_name });
\&    print $artist_name, "\*(Aqs hotttnesss is ", $frith\->get_hotttnesss(), "\en";
\&
\&    ######## Results may differ ########
\&    #
\&    # Fred Frith\*(Aqs hotttnesss is 0.37745777314700002
.Ve
.SS "get_images"
.IX Subsection "get_images"
.Vb 1
\&  Get a list of artist images.
\&
\&  ARGUMENTS:
\&    cache   => A boolean indicating whether or not the cached value should be used (if available). Defaults to True.
\&    results => An integer number of results to return
\&    start   => An integer starting value for the result set
\&    license => A string specifying the desired license type
\&
\&  RETURNS:
\&    An array of image document hash refs.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest;
\&    my $artist_name   = q{Fred Frith};
\&    my $frith         = artist({ name => $artist_name });
\&    my @image_docs    = $frith\->get_images();
\&    my %image_doc     = %{ $image_docs[0] };
\&
\&    print \*(Aqurl : \*(Aq, $image_doc{ \*(Aqurl\*(Aq }, "\en";
\&
\&    ######## Results may differ ########
\&    #
\&    # url : http://userserve\-ak.last.fm/serve/_/278303.jpg
.Ve
.SS "get_news"
.IX Subsection "get_news"
.Vb 1
\&  Get a list of news articles on the web related to an artist.
\&
\&  ARGUMENTS:
\&    cache   => A boolean indicating whether or not the cached value should be used (if available). Defaults to True.
\&    results => An integer number of results to return
\&    start   => An integer starting value for the result set
\&
\&  RETURNS:
\&    An array of news document hash refs.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest;
\&    my $artist_name   = q{Sun Ra};
\&    my $ra            = artist({ name => $artist_name });
\&    my @news_docs     = $ra\->get_news();
\&    my %news_doc      = %{ $news_docs[0] };
\&
\&    print \*(Aqname : \*(Aq, $news_doc{ \*(Aqname\*(Aq }, "\en";
\&
\&    ######## Results may differ ########
\&    #
\&    # name : This Week in Jazz Blogrolling
.Ve
.SS "get_reviews"
.IX Subsection "get_reviews"
.Vb 1
\&  Get reviews related to an artist\*(Aqs work.
\&
\&  ARGUMENTS:
\&    cache   => A boolean indicating whether or not the cached value should be used (if available). Defaults to True.
\&    results => An integer number of results to return
\&    start   => An integer starting value for the result set
\&
\&  RETURNS:
\&    An array of review document hash refs.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest;
\&    my $artist_name   = q{Autechre};
\&    my $ae            = artist({ name => $artist_name });
\&    my @review_docs   = $ae\->get_reviews();
\&    my %review_doc    = %{ $reviews_docs[0] };
\&
\&    print \*(Aqurl : \*(Aq, $review_doc{ \*(Aqurl\*(Aq }, "\en";
\&
\&    ######## Results may differ ########
\&    #
\&    # url : http://www.ultimate\-guitar.com/reviews/compact_discs/autechre/draft_730/index.html
.Ve
.SS "get_similar"
.IX Subsection "get_similar"
.Vb 1
\&  Get similar artists.
\&
\&  ARGUMENTS:
\&    cache           => A boolean indicating whether or not the cached value should be used (if available). Defaults to True.
\&    results         => An integer number of results to return
\&    start           => An integer starting value for the result set
\&    max_familiarity => A float specifying the max familiarity of artists to search for
\&    min_familiarity => A float specifying the min familiarity of artists to search for
\&    max_hotttnesss  => A float specifying the max hotttnesss of artists to search for
\&    min_hotttnesss  => A float specifying the max hotttnesss of artists to search for
\&    reverse         => A boolean indicating whether or not to return dissimilar artists (wrecommender). Defaults to False.
\&        
\&  RETURNS:
\&    An array of WWW::EchoNest::Artist instances.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest;
\&    my $artist_name       = q{Autechre};
\&    my $ae                = artist({ name => $artist_name });
\&    my @similar_artists   = $ae\->get_similar();
\&    my $similar_artist    = $similar_artists[0];
\&
\&    print \*(Aqname : \*(Aq, $similar_artist\->get_name() , "\en";
\&
\&    ######## Results may differ ########
\&    #
\&    # name : Aphex Twin
.Ve
.SS "get_songs"
.IX Subsection "get_songs"
.Vb 1
\&  Get the songs associated with an artist.
\&
\&  ARGUMENTS:
\&    cache           => A boolean indicating whether or not the cached value should be used (if available). Defaults to True.
\&    results         => An integer number of results to return
\&    start           => An integer starting value for the result set
\&        
\&  RETURNS:
\&    An array of WWW::EchoNest::Song instances.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest;
\&    my $artist_name       = q{Autechre};
\&    my $ae                = artist({ name => $artist_name });
\&    my @ae_songs          = $ae\->get_songs();
\&    my $ae_song           = $ae_songs[0];
\&
\&    print "$artist_name song : ", $ae_song\->get_title() , "\en";
\&
\&    ######## Results may differ ########
\&    #
\&    # Autechre song : Steels
.Ve
.SS "get_terms"
.IX Subsection "get_terms"
.Vb 1
\&  Get the terms associated with an artist.
\&
\&  ARGUMENTS:
\&    cache    => A boolean indicating whether or not the cached value should be used (if available). Defaults to True.
\&    sort     => A string specifying the desired sorting type (weight or frequency)
\&        
\&  RETURNS:
\&    An array of term document hash refs.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest;
\&    my $artist_name       = q{Autechre};
\&    my $ae                = artist({ name => $artist_name });
\&    my @ae_terms          = $ae\->terms();
\&    my %ae_term           = %{ $ae_terms[0] };
\&
\&    foreach my $key (keys %ae_term) {
\&        print $key, \*(Aq : \*(Aq, $ae_term{$key}, "\en";
\&    }
\&
\&    ######## Results may differ ########
\&    #
\&    # frequency : 0.94989445652524185
\&    # name : glitch
\&    # weight : 1.0
.Ve
.SS "get_urls"
.IX Subsection "get_urls"
.Vb 1
\&  Get the urls for an artist.
\&
\&  ARGUMENTS:
\&    cache    => A boolean indicating whether or not the cached value should be used (if available). Defaults to True.
\&        
\&  RETURNS:
\&    A url document hash ref.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest;
\&    my $artist_name       = q{Autechre};
\&    my $ae                = artist({ name => $artist_name });
\&    my $ae_urls           = $ae\->urls();
\&
\&    print $artist_name, "\*(Aqs wikipedia site is ", $ae_urls\->{ q{wikipedia_url} }, "\en";
\&
\&    ######## Results may differ ########
\&    #
\&    # Autechre\*(Aqs wikipedia site is http://en.wikipedia.org/wiki/Autechre
.Ve
.SS "get_video"
.IX Subsection "get_video"
.Vb 1
\&  Get a list of video documents found on the web related to an artist.
\&
\&  ARGUMENTS:
\&    cache           => A boolean indicating whether or not the cached value should be used (if available). Defaults to True.
\&    results         => An integer number of results to return
\&    start           => An integer starting value for the result set
\&        
\&  RETURNS:
\&    An array of video document hash refs.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest;
\&    my $artist_name       = q{Autechre};
\&    my $ae                = artist({ name => $artist_name });
\&    my @ae_videos         = $ae\->videos();
\&    my %ae_video          = %{ $ae_videos[0] };
\&
\&    foreach my $key (keys %ae_video) {
\&        print $key, \*(Aq : \*(Aq, $ae_video{$key}, "\en";
\&    }
\&
\&    ######## Results may differ ########
\&    #
\&    # url : http://www.youtube.com/watch?v=as3jowB\-2cM
\&    # date_found : 2011\-05\-25T02:56:31
\&    # title : DJ Freak \- Autechre (Remix)
\&    # id : e18a600edd9616522d20219abf183243
\&    # site : youtube
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "list_terms"
.IX Subsection "list_terms"
.Vb 1
\&  Get a list of best terms to use with search.
\&
\&  ARGUMENTS:
\&    type => the type of terms to list; either \*(Aqmood\*(Aq or \*(Aqstyle\*(Aq
\&
\&  RETURNS:
\&    An array of hash refs.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest::Artist qw{ list_terms };
\&    my @best_terms = list_terms( { type => q{mood} });
\&    for (@best_terms) {
\&        my %term_for = %{ $_ };
\&    }
\&    foreach my $k ( keys %term_for ) {
\&        print $k, " : ", %term_for{$k}, "\en";
\&    }
\&
\&    ######## Results may differ ########
\&    #
\&    # name : aggressive
\&    # name : ambient
\&    # name : angry
\&    # name : angst\-ridden
\&    # name : bouncy
\&    # name : calming
\&    # name : carefree
.Ve
.SS "search_artist"
.IX Subsection "search_artist"
.Vb 1
\&  Search for artists by name, description, or constraint.
\&
\&  ARGUMENTS:
\&    name            => The name of an artist
\&    description     => A string describing the artist
\&    style           => A string describing the style/genre of the artist
\&    mood            => A string describing the mood of the artist
\&    start           => An integer starting value for the result set
\&    results         => An integer number of results to return
\&    buckets         => A list of strings specifying which buckets to retrieve
\&    limit           => A boolean indicating whether or not to limit the results to one of the id spaces specified in buckets
\&    fuzzy_match     => A boolean indicating whether or not to search for similar sounding matches (only works with name)
\&    max_familiarity => A float specifying the max familiarity of artists to search for
\&    min_familiarity => A float specifying the min familiarity of artists to search for
\&    max_hotttnesss  => A float specifying the max hotttnesss of artists to search for
\&    min_hotttnesss  => A float specifying the max hotttnesss of artists to search for
\&    rank_type       => A string denoting the desired ranking for description searches, either \*(Aqrelevance\*(Aq or \*(Aqfamiliarity\*(Aq
\&
\&  RETURNS:
\&    An array of WWW::EchoNest::Artist instances.
\&  
\&  EXAMPLE:
\&    use WWW::EchoNest::Artist qw{ search };
\&    @results = search( { name => \*(Aqt\-pain\*(Aq } );
\&    for (@results) {
\&        print $_\->get_name(), "\en";
\&    }
\&
\&    ######## Results may differ ########
\&    #
\&    # T\-Pain
\&    # T\-Pain & Lil Wayne
\&    # T\-Pain & 2 Pistols
.Ve
.SS "similar"
.IX Subsection "similar"
.Vb 1
\&  Return artists similar to this one.
\&
\&  ARGUMENTS:
\&    ids              => An artist id or list of ids
\&    names            => An artist name or list of names
\&    results          => An integer number of results to return
\&    buckets          => A list of strings specifying which buckets to retrieve
\&    limit            => A boolean indicating whether or not to limit the results to one of the id spaces specified in buckets
\&    start            => An integer starting value for the result set
\&    max_familiarity  => A float specifying the max familiarity of artists to search for
\&    min_familiarity  => A float specifying the min familiarity of artists to search for
\&    max_hotttnesss   => A float specifying the max hotttnesss of artists to search for
\&    min_hotttnesss   => A float specifying the max hotttnesss of artists to search for
\&    seed_catalog     => A string specifying the catalog similar artists are restricted to
\&
\&  RETURNS:
\&    An array of WWW::EchoNest::Artist instances.
\&
\&  EXAMPLE:
\&    my @artist_list     = ( artist(\*(Aqweezer\*(Aq), artist(\*(Aqradiohead\*(Aq) );
\&    my $id_list_ref     = map { $_\->id() } @artist_list;
\&    my @similar_artists = similar( {
\&        ids             => $id_list_ref,
\&        results         => 5,
\&    } );
\&
\&    for (@similar_artists) {
\&        print $_\->get_name(), "\en";
\&    }
\&
\&    ######## Results may differ ########
\&    # 
\&    # The Smashing Pumpkins
\&    # Biffy Clyro
\&    # Death Cab for Cutie
\&    # Jimmy Eat World
\&    # Nerf Herder
.Ve
.SS "top_hottt"
.IX Subsection "top_hottt"
.Vb 1
\&  Get the top hotttest artists, according to the Echo Nest
\&  
\&  ARGUMENTS:
\&    results   => An integer number of results to return
\&    start     => An integer starting value for the result set
\&    buckets   => A list of strings specifying which buckets to retrieve
\&    limit     => A boolean indicating whether or not to limit the results to one of the id spaces specified in buckets
\&  
\&  RETURNS:
\&    An array of blessed references to WWW::EchoNest::Artist objects.
\&  
\&  EXAMPLE:
\&    use WWW::EchoNest::Artist qw{ top_hottt };
\&    my @hotttest_artists = top_hottt();
\&    for (@hotttest_artists) {
\&        print $_\->get_name(), "\en";
\&    }
\&    
\&    ######## Results may differ ########
\&    #
\&    # Lady Gaga
\&    # Rihanna
\&    # Jennifer Lopez
\&    # Adele
\&    # Bruno Mars
\&    # LMFAO
\&    # Pit Bull
\&    # Blake Shelton
.Ve
.SS "top_terms"
.IX Subsection "top_terms"
.Vb 1
\&  Get a list of the top overall terms.
\&
\&  ARGUMENTS:
\&    results => an integer number of results to return
\&
\&  RETURNS:
\&    An array of hash refs
\&
\&  EXAMPLE:
\&    use WWW::EchoNest::Artist qw{ top_terms };
\&    my @terms_list = top_terms({ results => 2 });
\&    for (@terms_list) {
\&        my %term_for = %{ $_ };
\&        foreach my $k (keys %term_for) {
\&            print $k, " : ", $term_for{$k}, "\en";
\&        }
\&        print "\en";
\&    }
\&
\&    ######## Results may differ ########
\&    #
\&    # frequency : 1.0
\&    # name : rock
\&    #
\&    # frequency 0.98900693989606991
\&    # name : electronic
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Brian Sorahan, \f(CW\*(C`<bsorahan@gmail.com>\*(C'\fR
.SH "SUPPORT"
.IX Header "SUPPORT"
Join the Google group: <http://groups.google.com/group/www\-echonest>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks to all the folks at The Echo Nest for providing access to their
powerful \s-1API\s0.
.SH "LICENSE"
.IX Header "LICENSE"
Copyright 2011 Brian Sorahan.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
