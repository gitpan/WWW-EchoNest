.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WWW::EchoNest::Playlist 3pm"
.TH WWW::EchoNest::Playlist 3pm "2011-08-29" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::EchoNest::Playlist \- A Dynamic Playlist Object.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  The Playlist module loosely covers L< http://developer.echonest.com/docs/v4/playlist.html >.
\&  Refer to the official api documentation if you are unsure about something.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  Returns a new WWW::EchoNest::Playlist instance.
\&
\&  NOTE:
\&    WWW::EchoNest also provides a get_playlist() convenience function that also returns a new WWW::EchoNest::Playlist instance.
\&
\&  ARGUMENTS:
\&    type => a string representing the playlist type \-\- (\*(Aqartist\*(Aq, \*(Aqartist\-radio\*(Aq, \*(Aqartist\-description\*(Aq, \*(Aqsong\-radio\*(Aq)
\&    artist_pick => How songs should be chosen for each artist
\&    variety => A number between 0 and 1 specifying the variety of the playlist
\&    artist_id => the artist_id
\&    artist => the name of an artist
\&    song_id => the song_id
\&    description => A string describing the artist and song
\&    style => A string describing the style/genre of the artist and song
\&    mood => A string describing the mood of the artist and song
\&    results => An integer number of results to return
\&    max_tempo => The max tempo of song results
\&    min_tempo => The min tempo of song results
\&    max_duration => The max duration of song results
\&    min_duration => The min duration of song results
\&    max_loudness => The max loudness of song results
\&    min_loudness => The min loudness of song results
\&    artist_max_familiarity => A float specifying the max familiarity of artists to search for
\&    artist_min_familiarity => A float specifying the min familiarity of artists to search for
\&    artist_max_hotttnesss => A float specifying the max hotttnesss of artists to search for
\&    artist_min_hotttnesss => A float specifying the max hotttnesss of artists to search for
\&    song_max_hotttnesss => A float specifying the max hotttnesss of songs to search for
\&    song_min_hotttnesss => A float specifying the max hotttnesss of songs to search for
\&    max_energy => The max energy of song results
\&    min_energy => The min energy of song results
\&    max_dancibility => The max dancibility of song results
\&    min_dancibility => The min dancibility of song results
\&    mode => 0 or 1 (minor or major)
\&    key => 0\-11 (c, c\-sharp, d, e\-flat, e, f, f\-sharp, g, a\-flat, a, b\-flat, b)
\&    max_latitude => A float specifying the max latitude of artists to search for
\&    min_latitude => A float specifying the min latitude of artists to search for
\&    max_longitude => A float specifying the max longitude of artists to search for
\&    min_longitude => A float specifying the min longitude of artists to search for
\&    sort => A string indicating an attribute and order for sorting the results
\&    buckets => A list of strings specifying which buckets to retrieve
\&    limit => A boolean indicating whether or not to limit the results to one of the id spaces specified in buckets
\&    seed_catalog => A Catalog object or catalog id to use as a seed
\&    source_catalog => A Catalog object or catalog id
\&    steer => A steering value to determine the target song attributes
\&    steer_description => A steering value to determine the target song description term attributes
\&    rank_type => A string denoting the desired ranking for description searches, either \*(Aqrelevance\*(Aq or \*(Aqfamiliarity\*(Aq
\&
\&
\&
\&  RETURNS:
\&    A new instance of WWW::EchoNest::Playlist.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest qw( :all );
\&    use WWW::EchoNest::Playlist;
\&    my $playlist = get_playlist( { type => \*(Aqartist\-radio\*(Aq, artist => [ \*(AqThe Beatles\*(Aq, \*(AqThe Rolling Stones\*(Aq, ], } );
.Ve
.SS "get_next_song"
.IX Subsection "get_next_song"
.Vb 1
\&  Get the next song in the playlist.
\&
\&  ARGUMENTS:
\&    none
\&
\&  RETURNS:
\&    A WWW::EchoNest::Song instance.
\&
\&  EXAMPLE:
\&    my $next_song = $playlist\->get_next_song();
.Ve
.SS "get_current_song"
.IX Subsection "get_current_song"
.Vb 1
\&  Get the current song in the playlist.
\&
\&  ARGUMENTS:
\&    none
\&
\&  RETURNS:
\&    A WWW::EchoNest::Song instance.
\&
\&  EXAMPLE:
\&    my $curr_song = $playlist\->get_current_song();
.Ve
.SS "session_info"
.IX Subsection "session_info"
.Vb 1
\&  Get information about the playlist.
\&
\&  ARGUMENTS:
\&    none
\&
\&  RETURNS:
\&    A reference to a hash that contains diagnostic information
\&    about the currently running playlist.
\&
\&  EXAMPLE:
\&    my $playlist_info = $playlist\->session_info();
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "static"
.IX Subsection "static"
.Vb 1
\&  Get a static playlist.
\&
\&  ARGUMENTS:
\&    type => a string representing the playlist type (\*(Aqartist\*(Aq, \*(Aqartist\-radio\*(Aq, ...)
\&    artist_pick => How songs should be chosen for each artist
\&    variety => A number between 0 and 1 specifying the variety of the playlist
\&    artist_id => the artist_id
\&    artist => the name of an artist
\&    song_id => the song_id
\&    description => A string describing the artist and song
\&    style => A string describing the style/genre of the artist and song
\&    mood => A string describing the mood of the artist and song
\&    results => An integer number of results to return
\&    max_tempo => The max tempo of song results
\&    min_tempo => The min tempo of song results
\&    max_duration => The max duration of song results
\&    min_duration => The min duration of song results
\&    max_loudness => The max loudness of song results
\&    min_loudness => The min loudness of song results
\&    artist_max_familiarity => A float specifying the max familiarity of artists to search for
\&    artist_min_familiarity => A float specifying the min familiarity of artists to search for
\&    artist_max_hotttnesss => A float specifying the max hotttnesss of artists to search for
\&    artist_min_hotttnesss => A float specifying the max hotttnesss of artists to search for
\&    song_max_hotttnesss => A float specifying the max hotttnesss of songs to search for
\&    song_min_hotttnesss => A float specifying the max hotttnesss of songs to search for
\&    max_energy => The max energy of song results
\&    min_energy => The min energy of song results
\&    max_dancibility => The max dancibility of song results
\&    min_dancibility => The min dancibility of song results
\&    mode => 0 or 1 (minor or major)
\&    key => 0\-11 (c, c\-sharp, d, e\-flat, e, f, f\-sharp, g, a\-flat, a, b\-flat, b)
\&    max_latitude => A float specifying the max latitude of artists to search for
\&    min_latitude => A float specifying the min latitude of artists to search for
\&    max_longitude => A float specifying the max longitude of artists to search for
\&    min_longitude => A float specifying the min longitude of artists to search for                        
\&    sort => A string indicating an attribute and order for sorting the results
\&    buckets => A list of strings specifying which buckets to retrieve
\&    limit => A boolean indicating whether or not to limit the results to one of the id spaces specified in buckets
\&    seed_catalog => A Catalog object or catalog id to use as a seed
\&    source_catalog => A Catalog object or catalog id
\&    rank_type => A string denoting the desired ranking for description searches, either \*(Aqrelevance\*(Aq or \*(Aqfamiliarity\*(Aq
\&
\&
\&
\&  RETURNS:
\&    A reference to a hash that contains diagnostic information about the currently running playlist.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest::Playlist qw( static );
\&    my $static_playlist = static( { type => \*(Aqartist\-radio\*(Aq, artist => [ \*(AqThe Beatles\*(Aq, \*(AqThe Rolling Stones\*(Aq, ], } );
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Brian Sorahan, \f(CW\*(C`<bsorahan@gmail.com>\*(C'\fR
.SH "SUPPORT"
.IX Header "SUPPORT"
Join the Google group: <http://groups.google.com/group/www\-echonest>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks to all the folks at The Echo Nest for providing access to their
powerful \s-1API\s0.
.SH "LICENSE"
.IX Header "LICENSE"
Copyright 2011 Brian Sorahan.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
