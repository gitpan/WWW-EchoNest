.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WWW::EchoNest::Catalog 3pm"
.TH WWW::EchoNest::Catalog 3pm "2011-08-29" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::EchoNest::Catalog
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  Create catalogs of artists and songs for a given API Key. For example, Catalog names can be provided as arguments to some of the Playlist methods, to return only songs that are by artists in a given catalog.
\&  Please go to <http://developer.echonest.com/docs/v4/catalog.html> for more information about the way the Echo Nest Catalog API works.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
.Vb 1
\&  Returns a new WWW::EchoNest::Catalog instance.
\&  
\&  NOTE:
\&    WWW::EchoNest also provides the get_catalog() convenience function
\&    to create new instances of WWW::EchoNest::Catalog.
\&  
\&  ARGUMENTS:
\&    id        => a catalog id
\&    name      => a catalog name
\&    type      => \*(Aqsong\*(Aq or \*(Aqartist\*(Aq \-\- specifies the catalog type
\&  
\&  RETURNS:
\&    A new instance of WWW::EchoNest::Catalog.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest::Catalog;
\&    $catalog = WWW::EchoNest::Catalog\->new({ name => \*(Aqmy_songs\*(Aq, type => \*(Aqsongs\*(Aq });
\&    print \*(Aqid : \*(Aq, $catalog\->get_id, "\en";
\&    
\&    ######## Results will differ ########
\&    #
\&    # id : CAPSBIZ131500C102A
\&
\&    # or...
\&
\&    use WWW::EchoNest qw( :all );
\&    # Note:
\&    # \- <type> defaults to song, so all we need is a name
\&    # \- this method also could have been called with the HASH ref above
\&    $catalog = get_catalog(\*(Aqmy_songs\*(Aq);
\&    print \*(Aqid : \*(Aq, $catalog\->get_id, "\en";
\&    
\&    ######## Results may differ ########
\&    #
\&    # id : CAPSBIZ131500C102A
.Ve
.SS "add_song"
.IX Subsection "add_song"
.Vb 1
\&  Add some Song objects to add to the catalog.
\&
\&  ARGUMENTS:
\&    Some WWW::EchoNest::Song objects.
\&  
\&  RETURNS:
\&    A reference to an array of tickets to be used with the \*(Aqstatus\*(Aq method.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest qw( :all );
\&    my $imagine_song      = get_song(\*(AqSOFNJLR1312FDFABE5\*(Aq);
\&    my $satisfaction_song = get_song(\*(AqSOMEEYZ12A8C1430B5\*(Aq);
\&    my @song_list = ( $imagine_song, $satisfaction_song );
\&    my $catalog = get_catalog(\*(Aqclassic_songs\*(Aq);
\&    my $tickets_ref = $catalog\->add_song( @song_list );
\&    my %status_for = map { $_ => $catalog\->status($_) } @$tickets_ref;
\&
\&    use Data::Dumper;
\&    for (keys %status_for) {
\&        print "ticket: $_\en";
\&        print \*(Aqstatus: \*(Aq . $status_for{$_}{\*(Aqticket_status\*(Aq};
\&    };
\&    
\&    ######## Results may differ ########
\&    #
\&    # ticket : <insert_ticket_number_here>
\&    # status : complete
.Ve
.SS "add_artist"
.IX Subsection "add_artist"
.Vb 1
\&  Add some Artist objects to add to the catalog.
\&
\&  ARGUMENTS:
\&    Some WWW::EchoNest::Artist objects.
\&  
\&  RETURNS:
\&    A reference to an array of tickets to be used with the \*(Aqstatus\*(Aq method.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest qw( :all );
\&    my $beatles = get_artist(\*(AqThe Beatles\*(Aq);
\&    my $stones  = get_artist(\*(AqThe Rolling Stones\*(Aq);
\&    my $catalog = get_catalog( { name => \*(Aqclassic_artists\*(Aq, type => \*(Aqartist\*(Aq } );
\&    my $tickets_ref = $catalog\->add_artist( $beatles, $stones );
\&    my %status_for = map { $_ => $catalog\->status($_) } @$tickets_ref;
\&
\&    use Data::Dumper;
\&    for (keys %status_for) {
\&        print "ticket: $_\en";
\&        print \*(Aqstatus: \*(Aq . $status_for{$_}{\*(Aqticket_status\*(Aq};
\&    };
\&    
\&    ######## Results may differ ########
\&    #
\&    # ticket : <insert_ticket_number_here>
\&    # status : complete
.Ve
.SS "status"
.IX Subsection "status"
.Vb 1
\&  Check the status of a catalog update.
\&  
\&  ARGUMENTS:
\&    ticket => A string representing a ticket ID.
\&  
\&  RETURNS:
\&    A hash ref that contains info about a ticket\*(Aqs status.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest qw( :all );
\&    my $catalog = catalog( { name => \*(Aqmy_songs\*(Aq, type => \*(Aqsongs\*(Aq } );
\&    # Make an update, and store the ticket id as $ticket_id
\&    use Data::Dumper;
\&    print \*(Aqstatus : \*(Aq, pretty_json( $catalog\->status($ticket_id) ), "\en";
\&    
\&    ######## Results may differ ########
\&    #
\&    # status: {
\&    #     ticket_status => \*(Aqcomplete\*(Aq,
\&    #     update_info => [
\&    #     ]
\&    # };
.Ve
.SS "get_profile"
.IX Subsection "get_profile"
.Vb 1
\&  Get basic information about a catalog.
\&  
\&  ARGUMENTS:
\&    none
\&  
\&  RETURNS:
\&    A hash ref to a description of a catalog.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest qw( :all );
\&    # Create a catalog and store it as $catalog...
\&    # Do some stuff with the catalog, like making updates...
\&    print \*(Aqprofile: \*(Aq, pretty_json( $catalog\->get_profile ), "\en";
\&    
\&    ######## Results may differ ########
\&    #
\&    # profile: {
\&    #     \*(Aqid\*(Aq                => \*(AqCAMSSDQ1303D86C20D\*(Aq,
\&    #     \*(Aqname\*(Aq              => \*(Aqcatalog_foo_by_song\*(Aq,
\&    #     \*(Aqpending_tickets\*(Aq   => [],
\&    #     \*(Aqresolved\*(Aq          => 2,
\&    #     \*(Aqtotal\*(Aq             => 2,
\&    #     \*(Aqtype\*(Aq              => \*(Aqsong\*(Aq
\&    # };
.Ve
.SS "read_items"
.IX Subsection "read_items"
.Vb 1
\&  Returns data from the catalog. Expands the requested buckets.
\&  
\&  ARGUMENTS:
\&    buckets   => A list of strings specifying which buckets to retrieve
\&    results   => An integer number of results to return (defaults to 15)
\&    start     => An integer starting value for the result set
\&    
\&    See <http://developer.echonest.com/docs/v4/catalog.html#read> for more info about possible values for \*(Aqbuckets\*(Aq.
\&
\&  
\&  RETURNS:
\&    An array ref of objects in the catalog.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest qw( :all );
\&    # Create a catalog and store it as $catalog...
\&    # Do some stuff with the catalog, like making updates...
\&    my $items = $catalog\->read_items( { results => 1 } );
\&    print \*(Aqitems: \*(Aq, pretty_json( $items ), "\en";
\&    
\&    ######## Results may differ ########
\&    #
\&    # items: {
\&    # }
.Ve
.SS "get_feed"
.IX Subsection "get_feed"
.Vb 2
\&  Returns feed (news, blogs, reviews, audio, video) for the catalog artists;
\&  response depends on requested buckets
\&  
\&  ARGUMENTS:
\&    buckets   => A list of strings specifying which buckets to retrieve
\&    results   => An integer number of results to return (defaults to 15)
\&    start     => An integer starting value for the result set
\&
\&    See <http://developer.echonest.com/docs/v4/catalog.html#read> for more info about possible values for \*(Aqbuckets\*(Aq.
\&
\&  
\&  RETURNS:
\&    A reference to an array of news, blogs, reviews, audio or video document hash refs.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest qw( :all );
\&    # Create a catalog and store it as $catalog...
\&    # Do some stuff with the catalog, like making updates...
\&    my $feeds = $catalog\->get_feed( { results => 1 } );
\&    print \*(Aqfeeds: \*(Aq, pretty_json( $feed ), "\en";
\&
\&    ######## Results will differ ########
\&    #
\&    # Insert printout here!
\&    #
\&    #
.Ve
.SS "delete"
.IX Subsection "delete"
.Vb 1
\&  Deletes the entire catalog.
\&  
\&  ARGUMENTS:
\&    none
\&  
\&  RETURNS:
\&    The deleted catalog\*(Aqs id.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest qw( :all );
\&    # Create a catalog and store it as $catalog...
\&    my $deleted_id = $catalog\->delete();
\&    print "Deleted catalog $catalog_id\en";
\&
\&    ######## Results will differ ########
\&    #
\&    # Deleted catalog CAMSSDQ1303D86C20D
\&    #
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "list_catalogs"
.IX Subsection "list_catalogs"
.Vb 1
\&  Returns a list of all catalogs for a given API key.
\&
\&  ARGUMENTS:
\&    results => An integer number of results to return (defaults to 30)
\&    start   => An integer starting value for the result set
\&
\&  RETURNS:
\&    A reference to an array of references to Catalog objects.
\&
\&  EXAMPLE:
\&    use WWW::EchoNest qw( :all );
\&    # Create some catalogs...
\&    my $catalog_list = list_catalogs( { results => 1 } );
\&    print \*(AqCatalogs: \*(Aq, pretty_json( $catalog_list ), "\en";
\&
\&    ######## Results will differ ########
\&    #
\&    # Catalogs: {
\&    # }
\&    #
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Brian Sorahan, \f(CW\*(C`<bsorahan@gmail.com>\*(C'\fR
.SH "SUPPORT"
.IX Header "SUPPORT"
Join the Google group: <http://groups.google.com/group/www\-echonest>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks to all the folks at The Echo Nest for providing access to their
powerful \s-1API\s0.
.SH "LICENSE"
.IX Header "LICENSE"
Copyright 2011 Brian Sorahan.
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of either: the \s-1GNU\s0 General Public License as published
by the Free Software Foundation; or the Artistic License.
.PP
See http://dev.perl.org/licenses/ for more information.
